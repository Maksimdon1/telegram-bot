import aiogram.utils.markdown as md
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from create_bot import dip, bot
from bot import keyboard
import time
import cofig
import rocket
class Form(StatesGroup):
    currency = State()
    value = State()  # Will be represented in storage as 'Form:name'
    ispaid =  State()
    pay_id = State()
    user_id = State()

#@dip.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id


    await bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –æ–±–º–µ–Ω–Ω–∏–∫ –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å DEATH", reply_markup=keyboard.buy())

async def back(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await state.finish()
    await bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –æ–±–º–µ–Ω–Ω–∏–∫ –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å DEATH", reply_markup=keyboard.buy())


#@dip.message_handler(commands=['start'])
async def buy(message: types.Message):
    user_id = message.from_user.id

    await bot.send_message(user_id, f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∫—É–ø–∏—Ç—å DEATH Coin –∑–∞ –≤–∞–ª—é—Ç—É TON\n1 üíé = {cofig.course} ‚ò†Ô∏è")
    time.sleep(0.5)
    await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤ —á–µ–º —É–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å:", reply_markup=keyboard.currency())
    await Form.currency.set()



async def currency(message: types.Message, state: FSMContext):
    async with state.proxy() as data:




        user_id = message.from_user.id

        if message.text == 'Toncoin üíé':
            currency = 'Ton'
            data['currency'] = currency

            await bot.send_message(user_id, f"–£–∫–∞–∂–∏—Ç–µ –Ω–∞ —Å–∫–æ–ª—å–∫–æ Ton –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏:", reply_markup=keyboard.back())
            await Form.next()
        elif message.text == 'DEATH Coin ‚ò†Ô∏è':
            currency = 'Death'
            data['currency'] = currency
            await bot.send_message(user_id, f"–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏:",reply_markup=keyboard.back())
            await Form.next()


        print(currency)




async def value(message: types.Message, state: FSMContext):
    async with state.proxy() as data:

        user_id = message.from_user.id
        user_name = message.from_user.username


        if message.text.isdigit() and int(message.text) >= 10:
            value = float(message.text)


            pay = 0
            death = 0




            if data['currency'] == 'Death':
                pay = value * cofig.course
                death = value
            if data['currency'] == 'Ton':
                pay = value
                death = value / cofig.course

            post = rocket.createInvoice(death=death, amount=pay)

            data['value'] = [{'pay_id': post['data']['id'], 'user_id': 'user_id', 'username': user_name}]









            await bot.send_message(user_id, f"$ –ß–ï–ö $\n\nTON ‚û°Ô∏è DEATH\n–ö—É—Ä—Å: 1 üíé = {cofig.course} ‚ò†Ô∏è \n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ –≤ TON: {pay}\n–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ: {death} Death", reply_markup=keyboard.url(post['data']['link']))
            await bot.send_message(user_id,'–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', reply_markup=keyboard.proff())

            await Form.next()





@dip.message_handler(state='*', commands='cancel')
@dip.message_handler(Text(equals='cancel', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    """
    Allow user to cancel any action
    """
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info('Cancelling state %r', current_state)
    # Cancel state and inform user about it
    await state.finish()
    # And remove keyboard (just in case)
    await message.reply('Cancelled.', reply_markup=types.ReplyKeyboardRemove())


#@dip.message_handler(lambda message: message.text, state=Form.verify)
async def verify(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        user_name = message.from_user.username
        payment = (data['value'])
        pay_id = data['value'][0]['pay_id']

        is_paid = rocket.get_invoice(pay_id)['data']['paid']
        pay_value = rocket.get_invoice(pay_id)['data']['amount']
        print(pay_value)
        print(data)
        print(payment)
        print(is_paid)




        user_id = message.from_user.id
        if is_paid:



            await bot.send_message(user_id, '–û–ø–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ',reply_markup=keyboard.buy())
            await send_pay(user_id=user_id, username=user_name, death=pay_value)
            await state.finish()
        else:
            await bot.send_message(user_id, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å –ø–∞—Ä—É –º–∏–Ω—É—Ç ')
            await Form.next()








    user_id = message.from_user.id

    await state.finish()







async def send_pay(user_id, death, username):
    await bot.send_message(-976090627, f'–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∞ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {death}  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} ')








def register_handlers_user(dp: Dispatcher):

    dp.register_message_handler(start, commands=['start'] )
    dp.register_message_handler(value, lambda message: message.text, state=Form.value)
    dp.register_message_handler(verify, lambda message: message.text and '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' in message.text  , state=Form.ispaid)
    dp.register_message_handler(buy,lambda message: message.text and '–ö—É–ø–∏—Ç—å DEATH' in message.text )
    dp.register_message_handler(back,lambda message: message.text and 'üîô –ù–∞–∑–∞–¥' in message.text )
#   dp.register_callback_query_handler(cmd_start, lambda message: message.data and message.data.startswith('ton'))
    dp.register_message_handler(currency,  lambda message: message.text and 'Toncoin üíé' in message.text or  'DEATH Coin ‚ò†Ô∏è' in message.text, state=Form.currency)
